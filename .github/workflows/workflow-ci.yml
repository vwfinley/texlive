name: Docker Image CI

env:
  CONTAINER_REGISTRY: "ghcr.io"
  VERSION_TAG: "test"

on:
  release:
  push:
    branches: "main"

jobs:
# https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action
# https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#jobsjob_idoutputs


#  set-image-tag:
#    runs-on: self-hosted
#    # Expose step outputs as job outputs
#    outputs:
#      output1: ${{ steps.step1.outputs.first }}
#    steps:
#    - id: step1
#      run: |
#        version=test
#        if [ github.event_name = 'release' ] then;
#          version=${{ github.event.release.tag_name }}
#        fi
#        echo "first=${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:$version" >> $GITHUB_OUTPUT



#  set-image-tag:
#    runs-on: self-hosted
#    # Expose step outputs as job outputs
#    outputs:
#      output1: ${{ steps.step1.outputs.first }}
#    steps:
#    - id: step1
#      run: echo "first=test" >> $GITHUB_OUTPUT
#
#  use-image-tag:
#    runs-on: self-hosted
#    needs: set-image-tag
#    steps:
#    - run: echo ${{needs.set-image-tag.outputs.output1}}

  get-timestamp:
    runs-on: self-hosted
    outputs:
      timestamp: ${{ steps.return.outputs.timestamp }}
    steps:
      - id: return
        run: echo "timestamp=$(date +"%Y%m%d%H%M%S")" >> $GITHUB_OUTPUT

  get-version:
    runs-on: self-hosted
    needs: get-timestamp
    outputs:
      version: ${{ steps.return.outputs.version }}
    steps:
    - if: github.event_name == 'release'
      run: echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
    - if: github.event_name != 'release'
      run: echo "VERSION=${{ needs.get-timestamp.outputs.timestamp }}" >> $GITHUB_ENV
    - id: return
      run: echo "version=${{ env.VERSION }}" >> "$GITHUB_OUTPUT"

  get-image-tag:
    runs-on: self-hosted
    needs: get-version
    outputs:
      image-tag: ${{ steps.return.outputs.image-tag }}
    steps:
      - id: return
        run: echo "image-tag=${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:${{ steps.return.outputs.version }}" >> $GITHUB_OUTPUT

  jobB:
    runs-on: self-hosted
    needs: get-image-tag
    steps:
    - run: echo ${{ needs.get-image-tag.outputs.image-tag }} 

  jobC:
    runs-on: self-hosted
    needs: get-image-tag
    steps:
    - run: echo ${{ needs.get-image-tag.outputs.image-tag }} 

#  set-version-tag:
#    name: Set Version Tag
#    runs-on: self-hosted
#    if: github.event_name == 'release'
#    outputs:
#      steps: ${{ steps.version-tag.outputs}}
#    steps:
#      - id: version-tag
#        run: echo "VERSION_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
#      
#  set-image-tag:
#    name: Set Image Tag
#    runs-on: self-hosted
#    if: ${{ always() }}
#    needs: set-version-tag
#    outputs:
#      steps: ${{ steps.image-tag.outputs }}
#    steps:
#      - id: image-tag
#        run: echo "IMAGE_TAG=${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:${{ env.VERSION_TAG }}" >> $GITHUB_ENV

#  set-timestamp:
#    runs-on: ubuntu-latest
#    outputs:
#      steps: ${{ steps.timestamp.outputs }}
#    steps:
#      - name: Set Timestamp
#        id: timestamp
#        run: echo "TIMESTAMP=$(date +"%Y%m%d%H%M%S")" >> $GITHUB_ENV


#  build:
#    name: Build Docker image
#    runs-on: self-hosted
#    needs: set-image-tag
#    steps:
#      - uses: actions/checkout@v4
#      - run: docker build . --no-cache --file Dockerfile --tag $IMAGE_TAG
#
#  publish:
#    name: Publish Docker image to container registry
#    needs: build
#    runs-on: self-hosted
#    if: github.event_name == 'release'
#    steps:
#      - uses: docker/login-action@v3
#        with:
#          registry: ${{env.CONTAINER_REGISTRY}}
#          username: ${{github.repository_owner}}
#          password: ${{secrets.GH_TOKEN}}
#      - run: docker push $IMAGE_TAG
#