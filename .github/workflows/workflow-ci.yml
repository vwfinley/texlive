name: Docker Image CI

env:
  CONTAINER_REGISTRY: "ghcr.io"
  VERSION_TAG: "test"

on:
  release:
  push:
    branches: "main"

jobs:


  first-job:
    runs-on: self-hosted
    steps:
    - id: identify
      run: |
        # use bash variable expression to get the substring
        export GIT_PR_SHA="${{ github.sha }}"
        export GIT_PR_SHA_SHORT="${GIT_PR_SHA:0:10}"

        echo "git_pr_sha=${GIT_PR_SHA}" >> $GITHUB_OUTPUT
        echo "git_pr_sha_short=${GIT_PR_SHA_SHORT}" >> $GITHUB_OUTPUT
    outputs:
      git_pr_sha: ${{ steps.identify.outputs.git_pr_sha }}
      git_pr_sha_short: ${{ steps.identify.outputs.git_pr_sha_short }}



  set-version-tag:
    name: Set Version Tag
    runs-on: self-hosted
    if: github.event_name == 'release'
    outputs:
      steps: ${{ steps.version-tag.outputs}}
    steps:
      - id: version-tag
        run: echo "VERSION_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
      
  set-image-tag:
    name: Set Image Tag
    runs-on: self-hosted
    if: ${{ always() }}
    needs: set-version-tag
    outputs:
      steps: ${{ steps.image-tag.outputs }}
    steps:
      - id: image-tag
        run: echo "IMAGE_TAG=${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:${{ env.VERSION_TAG }}" >> $GITHUB_ENV

#  set-timestamp:
#    runs-on: ubuntu-latest
#    outputs:
#      steps: ${{ steps.timestamp.outputs }}
#    steps:
#      - name: Set Timestamp
#        id: timestamp
#        run: echo "TIMESTAMP=$(date +"%Y%m%d%H%M%S")" >> $GITHUB_ENV


  build:
    name: Build Docker image
    runs-on: self-hosted
    needs: set-image-tag
    steps:
      - uses: actions/checkout@v4
      - run: docker build . --no-cache --file Dockerfile --tag $IMAGE_TAG

  publish:
    name: Publish Docker image to container registry
    needs: build
    runs-on: self-hosted
    if: github.event_name == 'release'
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ${{env.CONTAINER_REGISTRY}}
          username: ${{github.repository_owner}}
          password: ${{secrets.GH_TOKEN}}
      - run: docker push $IMAGE_TAG
